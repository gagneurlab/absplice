import os
import yaml
from os import listdir
from os.path import isfile, join
import pathlib

SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)

configfile: "./config.yaml"

genome = config['genome']
vcf_ids = [file for file in listdir(os.path.dirname(config['vcf'])) if '.tbi' not in file]

def splicemap5(wildcards):
    path = Path(config['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi5_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in config['splicemap_tissues']
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap3(wildcards):
    path = Path(config['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi3_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in config['splicemap_tissues']
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap_dir_name(filename):
    return os.path.dirname(filename)

splicemap_v_mapper = {
    'hg38': 'gtex_v8',
    'hg19': 'gtex_v7',
}

if config['use_rocksdb'] == True:
    rule all:
        input:
            expand(config['splicemap']['psi3'],
                genome = config['genome'], tissue = config['splicemap_tissues']),
            expand(config['splicemap']['psi5'],
                genome = config['genome'], tissue = config['splicemap_tissues']),
            expand(config['splicing_pred']['absplice_dna'],
                genome = config['genome'], vcf_id=vcf_ids),
            expand(config['spliceai_rocksdb'][genome], chromosome = config['chromosomes']),

else:
    rule all:
        input:
            expand(config['splicemap']['psi3'],
                genome = config['genome'], tissue = config['splicemap_tissues']),
            expand(config['splicemap']['psi5'],
                genome = config['genome'], tissue = config['splicemap_tissues']),
            expand(config['splicing_pred']['absplice_dna'],
                genome = config['genome'], vcf_id=vcf_ids),

rule download_human_fasta:
    params:
        config['fasta'][genome]['url']
    output:
        config['fasta'][genome]['file']
    shell:
        "wget -O - {params} | gunzip -c > {output}"


rule download_splicemaps:
    params:
        version = splicemap_v_mapper[config['genome']],
        dirname = splicemap_dir_name(config['splicemap']['psi3'])
    output:
        splicemap_psi3 = config['splicemap']['psi3'],
        splicemap_psi5 = config['splicemap']['psi5'],
#        splicemap_dir = config['splicemap_dir']
    shell:
        #"splicemap_download --version {params.version} --splicemap_dir {output} --tissues Testis --tissues Cells_Cultured_fibroblasts"
        "splicemap_download --version {params.version} --splicemap_dir {params.dirname} --tissues {wildcards.tissue}"


rule mmsplice_splicemap:
    input:
        vcf = config['vcf'],
        fasta = config['fasta'][genome]['file'],
        splicemap_5 = splicemap5,
        splicemap_3 = splicemap3
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 32000,
        threads = 4
    output:
        result = config['splicing_pred']['mmsplice_splicemap']
    script:
        "./mmsplice_splicemap.py"


if config['use_rocksdb'] == True:
    genome_mapper = {
        'hg38': 'grch38',
        'hg19': 'grch37',
    }
    rule download_rocksdb:
        params:
            version = genome_mapper[config['genome']]
        conda:
            "environment_spliceai_rocksdb.yaml"
        output:
            spliceai_rocksdb = directory(config['spliceai_rocksdb'][genome])
        shell:
            "spliceai_rocksdb_download --version {params.version} --db_path {output.spliceai_rocksdb} --chromosome {wildcards.chromosome}"

    def dict_path(wildcards):
        paths = {}
        genome = wildcards['genome']
        for chr in config['chromosomes']:
            paths[chr] = config['spliceai_rocksdb'][genome].format(chromosome=chr)
        return paths

    rule spliceai:
        resources:
#            ntasks = 1,
            mem_mb = lambda wildcards, attempt: attempt * 16000,
            threads = 1,
            gpu = 1,
        input:
            vcf = config['vcf'],
            fasta = config['fasta'][genome]['file'],
            spliceai_rocksdb = expand(config['spliceai_rocksdb'][genome],
                 chromosome=config['chromosomes'])
        params:
            db_path = dict_path,
            lookup_only = False,
            genome = genome_mapper[config['genome']],
        conda:
            "environment_spliceai_rocksdb.yaml"
        output:
            result = config['splicing_pred']['spliceai']
        script:
            "./spliceai.py"
else:
    genome_mapper = {
        'hg38': 'grch38',
        'hg19': 'grch37',
    }
    rule spliceai:
        resources:
#            ntasks = 1,
            mem_mb = lambda wildcards, attempt: attempt * 16000,
            threads = 1,
            gpu = 1,
        input:
            vcf = config['vcf'],
            fasta = config['fasta'][genome]['file']
        params:
            genome = genome_mapper[config['genome']]
        output:
            result = config['splicing_pred']['spliceai_vcf']
        shell:
            'spliceai -I {input.vcf} -O {output.result} -R {input.fasta} -A {params.genome}'
    
    rule spliceai_vcf_to_csv:
        input:
            spliceai_vcf = config['splicing_pred']['spliceai_vcf'],
        output:
            spliceai_csv = config['splicing_pred']['spliceai'],
        run:
            from absplice.utils import read_spliceai_vcf
            df = read_spliceai_vcf(input.spliceai_vcf)
            df.to_csv(output.spliceai_csv, index=False)

rule absplice_dna:
    input:
        mmsplice_splicemap = config['splicing_pred']['mmsplice_splicemap'],
        spliceai = config['splicing_pred']['spliceai'],
    output:
        absplice_dna = config['splicing_pred']['absplice_dna']
    script:
        "./absplice_dna.py"
