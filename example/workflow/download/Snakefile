import os
import yaml
from os import listdir
from os.path import isfile, join
import pathlib

# config_download_path = f"{SNAKEMAKE_DIR}/../../download/config_download.yaml"
# with open(config_download_path, "r") as fd:
#     config_download = yaml.safe_load(fd)

# configfile: "./config.yaml"

genome = config['genome']

all_splicemap_tissues = config['splicemap_tissues']
if 'tissue_cat' in config.keys():
    all_splicemap_tissues.append(config['tissue_cat'])
all_splicemap_tissues = sorted(set(all_splicemap_tissues))
all_splicemap_tissues = [
    tissue for tissue in all_splicemap_tissues 
    if tissue in config_download['all_available_splicemap_tissues']]

def splicemap5(wildcards):
    path = Path(config_download['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi5_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in all_splicemap_tissues
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap3(wildcards):
    path = Path(config_download['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi3_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in all_splicemap_tissues
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap_dir_name(filename):
    return os.path.dirname(filename)

splicemap_v_mapper = {
    'hg38': 'gtex_v8',
    'hg19': 'gtex_v7',
}

list_outputs = list()

rule download_human_fasta:
    params:
        config_download['fasta'][genome]['url']
    output:
        config_download['fasta'][genome]['file']
    shell:
        "wget -O - {params} | gunzip -c > {output}"
list_outputs.append(config_download['fasta'][genome]['file'])

rule download_splicemaps:
    params:
        version = splicemap_v_mapper[config['genome']],
        dirname = splicemap_dir_name(config_download['splicemap']['psi3'])
    output:
        splicemap_psi3 = config_download['splicemap']['psi3'],
        splicemap_psi5 = config_download['splicemap']['psi5'],
    shell:
        "splicemap_download --version {params.version} --splicemap_dir {params.dirname} --tissues {wildcards.tissue}"
list_outputs.append(
    expand(config_download['splicemap']['psi3'], 
    genome = config['genome'], tissue = config['splicemap_tissues']),
)
list_outputs.append(
    expand(config_download['splicemap']['psi5'], 
    genome = config['genome'], tissue = config['splicemap_tissues']),
)

if config['AbSplice_RNA'] == True:
    rule download_human_gtf:
        params:
            config_download['gtf'][genome]['url']
        output:
            config_download['gtf'][genome]['file']
        shell:
            "wget -O - {params} | gunzip -c > {output}"
    list_outputs.append(config_download['gtf'][genome]['file'])
    
    
    rule coding_genes:
        input:
            gtf_file = config_download['gtf'][genome]['file'],
        output:
            coding_genes = config_download['gtf'][genome]['coding_genes']
        script:
            "./coding_genes.py"
    list_outputs.append(config_download['gtf'][genome]['coding_genes'])
    
    
    maf_version_mapper = {
            'hg38': '3.1.2',
            'hg19': '2.1.1',
        }
    rule download_gnomad_maf_db:
        params:
            version = maf_version_mapper[config['genome']]
        conda:
            "../../envs/environment_gnomad_rocksdb.yaml"
        output:
            gnomad_maf_db = directory(config_download['gnomad_rocksdb'][genome])
        shell:
            "gnomad_rocksdb_download --version {params.version} --db_path {output.gnomad_maf_db}"
    list_outputs.append(config_download['gnomad_rocksdb'][genome])

if config['use_rocksdb'] == True:
    genome_mapper = {
        'hg38': 'grch38',
        'hg19': 'grch37',
    }
    rule download_rocksdb:
        params:
            version = genome_mapper[config['genome']]
        conda:
            "../../envs/environment_spliceai_rocksdb.yaml"
        output:
            spliceai_rocksdb = directory(config_download['spliceai_rocksdb'][genome])
        shell:
            "spliceai_rocksdb_download --version {params.version} --db_path {output.spliceai_rocksdb} --chromosome {wildcards.chromosome}"
    list_outputs.append(
        expand(config_download['spliceai_rocksdb'][genome],
        chromosome = config_download['chromosomes']
        )
    )


rule all_download:
    input:
        list_outputs


del splicemap5
del splicemap3
        
