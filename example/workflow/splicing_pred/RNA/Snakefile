import os
import yaml
from os import listdir
from os.path import isfile, join
import pathlib

include: "../DNA/rare_variants/Snakefile"
include: "./count_table/Snakefile"
include: "./outliers/Snakefile"

genome = config['genome']
vcf_dir = os.path.dirname(config['vcf'])
vcf_ids = [file for file in listdir(vcf_dir) if '.tbi' not in file]

def splicemap5(wildcards):
    path = Path(config_download['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi5_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in config['splicemap_tissues']
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap3(wildcards):
    path = Path(config_download['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi3_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in config['splicemap_tissues']
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap_cat5(wildcards):
    path = Path(config_download['splicemap_dir'])
    return path / f'{wildcards.tissue_cat}_splicemap_psi5_method=kn_event_filter=median_cutoff.csv.gz'

def splicemap_cat3(wildcards):
    path = Path(config_download['splicemap_dir'])
    return path / f'{wildcards.tissue_cat}_splicemap_psi3_method=kn_event_filter=median_cutoff.csv.gz'


rule infer_delta_psi_from_cat:
    input:
        mmsplice_splicemap = config_pred['splicing_pred']['mmsplice_splicemap'],
        splicemap_5 = splicemap5,
        splicemap_3 = splicemap3,
        splicemap_cat5 = splicemap_cat5,
        splicemap_cat3 = splicemap_cat3,
        var_samples_df = config_cat['variant_sample_map'],
        cat_count_table = config_cat['cat_count_table']['updated'],
    params:
        tissue_cat = '{tissue_cat}',
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 64000,
        threads = 1
    output:
        result = config_pred['splicing_pred']['delta_psi_inferred_from_cat']
    script:
        "./infer_delta_psi_from_cat.py"


rule absplice_rna:
    input:
        df_mmsplice = config_pred['splicing_pred']['mmsplice_splicemap'],
        df_spliceai = config_pred['splicing_pred']['spliceai'],
        df_mmsplice_cat = config_pred['splicing_pred']['delta_psi_inferred_from_cat'],
        df_outliers_cat = config_pred['splicing_pred']['cat_outliers'],
        var_samples_df = config_cat['variant_sample_map'],
    output:
        absplice_rna = config_pred['splicing_pred']['absplice_rna']
    script:
        "./absplice_rna.py"


rule absplice:
    input:
        absplice_dna = config_pred['splicing_pred']['absplice_dna'],
        absplice_rna = config_pred['splicing_pred']['absplice_rna'],
    output:
        absplice = config_pred['splicing_pred']['absplice_rna_with_dna_info']
    script:
        './absplice_all_info.py'


rule all_predict_rna:
    input:
        expand(config_pred['splicing_pred']['delta_psi_inferred_from_cat'],
            genome = config['genome'], 
            vcf_id=vcf_ids, tissue_cat=config['DROP']['DROP_group']),
        expand(config_pred['splicing_pred']['absplice_rna'],
            genome = config['genome'], 
            vcf_id=vcf_ids, tissue_cat=config['DROP']['DROP_group']),
        expand(config_pred['splicing_pred']['absplice_rna_with_dna_info'],
            genome = config['genome'], 
            vcf_id=vcf_ids, tissue_cat=config['DROP']['DROP_group']),
        